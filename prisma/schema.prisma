// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model Practice {
  id        String   @id @default(cuid())
  name      String
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  users     User[]
  orders    Orders[]   @relation("PracticeOrders")
  quotes    Quotes[]   @relation("PracticeQuotes")

  @@map(name: "practices")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  practiceId String
  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)

  orders         Orders[]         @relation("UserOrders")
  uploadedFiles  OrderFiles[]     @relation("UserUploadedFiles")
  approvals      OrderApprovals[] @relation("UserApprovals")
  quotes         Quotes[]         @relation("UserQuotes")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Orders {
  id           String    @id @default(cuid())
  orderNumber  String    @unique
  practiceId   String
  userId       String
  status       String
  subject      String?
  templateType String?
  colorMode    String?
  cost         Float?
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @default(now()) @map(name: "updated_at")

  practice     Practice  @relation("PracticeOrders", fields: [practiceId], references: [id], onDelete: Cascade)
  user         User      @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  files        OrderFiles[]
  approvals    OrderApprovals[]

  @@map(name: "orders")
}

model OrderFiles {
  id         String   @id @default(cuid())
  orderId    String
  fileName   String
  filePath   String
  fileType   String?
  uploadedBy String
  createdAt  DateTime @default(now()) @map(name: "created_at")

  order      Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  uploader   User     @relation("UserUploadedFiles", fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map(name: "order_files")
}

model OrderApprovals {
  id         String   @id @default(cuid())
  orderId    String
  revision   Int
  status     String
  comments   String?
  approvedBy String
  createdAt  DateTime @default(now()) @map(name: "created_at")

  order      Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  approver   User     @relation("UserApprovals", fields: [approvedBy], references: [id], onDelete: Cascade)

  @@map(name: "order_approvals")
}

model Quotes {
  id                  String   @id @default(cuid())
  practiceId          String
  userId              String
  quoteNumber         String   @unique
  status              String
  totalCost           Float?
  purchaseOrder       String?
  costCenter          String?
  subject             String?
  estimatedRecipients Int?
  colorMode           String?
  dataCleansing       Boolean?
  ncoaUpdate          Boolean?
  firstClassPostage   Boolean?
  notes               String?
  createdAt           DateTime @default(now()) @map(name: "created_at")

  practice   Practice @relation("PracticeQuotes", fields: [practiceId], references: [id], onDelete: Cascade)
  user       User     @relation("UserQuotes", fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "quotes")
}
