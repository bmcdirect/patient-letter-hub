import React, { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { TopNavigation } from "@/components/layout/top-navigation";
import { Sidebar } from "@/components/layout/sidebar";
import { QuickActions } from "@/components/dashboard/QuickActions";
import { ArchiveSection } from "@/components/dashboard/ArchiveSection";
import { 
  FileText, 
  Package, 
  LayoutDashboard,
  TrendingUp,
  Archive,
  AlertCircle,
  RefreshCw,
  ChevronDown,
  ChevronRight,
  Settings,
  Calendar,
  ListOrdered,
} from "lucide-react";
import { useLocation } from "wouter";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { isUnauthorizedError } from "@/lib/authUtils";

export default function Dashboard() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [, setLocation] = useLocation();
  const [isArchiveExpanded, setIsArchiveExpanded] = useState(false);

  // Fetch dashboard data from real PostgreSQL endpoints
  const { data: stats, isLoading: statsLoading } = useQuery({
    queryKey: ["/api/dashboard/stats"],
  });

  const { 
    data: quotesResponse, 
    isLoading: quotesLoading, 
    refetch: refetchQuotes 
  } = useQuery({
    queryKey: ["/api/quotes"],
  });

  const { 
    data: ordersResponse, 
    isLoading: ordersLoading, 
    refetch: refetchOrders 
  } = useQuery({
    queryKey: ["/api/orders"],
  });

  // Extract arrays from API responses
  const quotes = quotesResponse?.quotes || [];
  const orders = ordersResponse?.orders || [];

  // Filter orders awaiting approval
  const ordersAwaitingApproval = orders.filter((order: any) => 
    order.status?.startsWith('waiting-approval')
  ) || [];

  const { data: practices = [] } = useQuery({
    queryKey: ["/api/practices"],
  });

  // Convert quote to order mutation
  const convertToOrderMutation = useMutation({
    mutationFn: async (quoteId: number) => {
      const response = await apiRequest("POST", `/api/quotes/${quoteId}/convert`);
      const result = await response.json();
      return result;
    },
    onSuccess: async (order: any, quoteId) => {
      toast({
        title: "Success",
        description: `Quote converted to order ${order.orderNumber}`,
      });
      
      // Invalidate queries and wait for them to complete - force refetch
      await Promise.all([
        queryClient.invalidateQueries({ queryKey: ["/api/quotes"], refetchType: 'active' }),
        queryClient.invalidateQueries({ queryKey: ["/api/orders"], refetchType: 'active' }),
        queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"], refetchType: 'active' })
      ]);
      
      // Also manually refetch to ensure fresh data
      await Promise.all([
        refetchQuotes(),
        refetchOrders()
      ]);
      
      // Small delay to ensure data updates are processed before redirect
      setTimeout(() => {
        setLocation("/order");
      }, 100);
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      
      toast({
        title: "Conversion Failed",
        description: "Failed to convert quote. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Delete quote mutation
  const deleteQuoteMutation = useMutation({
    mutationFn: async (quoteId: number) => {
      const response = await apiRequest("DELETE", `/api/quotes/${quoteId}`);
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Quote Deleted",
        description: "Quote has been permanently deleted.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/quotes"] });
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] });
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      toast({
        title: "Delete Failed",
        description: "Failed to delete quote. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleQuoteEdit = (quote: any) => {
    setLocation(`/quotes/create?edit=${quote.id}`);
  };

  const handleRefreshAll = async () => {
    await Promise.all([
      refetchQuotes(),
      refetchOrders(),
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] })
    ]);
  };

  // Prepare archive data
  const archivedQuotes = quotes
    .filter((quote: any) => quote.status === "archived" || quote.status === "converted")
    .map((quote: any) => ({
      id: quote.id,
      number: quote.quoteNumber,
      type: "quote" as const,
      subject: quote.subject,
      totalCost: quote.totalCost,
      status: quote.status,
      createdAt: quote.createdAt,
      convertedAt: quote.status === "converted" ? quote.updatedAt : undefined,
      archivedAt: quote.status === "archived" ? quote.updatedAt : undefined,
    }));

  const completedOrders = orders
    .filter((order: any) => order.status === "completed" || order.status === "delivered")
    .map((order: any) => ({
      id: order.id,
      number: order.orderNumber,
      type: "order" as const,
      subject: order.subject,
      totalCost: order.totalCost,
      status: order.status,
      createdAt: order.createdAt,
      archivedAt: order.fulfilledAt || order.updatedAt,
    }));

  // Calculate stats from real data if not available from API
  const dashboardStats = stats || {
    activeQuotes: quotes.filter((q: any) => q.status === "pending").length,
    totalOrders: orders.length,
    pendingOrders: orders.filter((o: any) => o.status === "in-progress").length,
    completedOrders: orders.filter((o: any) => o.status === "completed" || o.status === "delivered").length,
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <TopNavigation />
      <div className="flex">
        <Sidebar />
        <main className="flex-1 ml-64 p-8">
          <div className="max-w-7xl mx-auto space-y-8">
            {/* Header */}
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
                  <LayoutDashboard className="h-8 w-8" />
                  Operations Dashboard
                </h1>
                <p className="text-gray-600 mt-1">Manage your quotes, orders, and practice workflows</p>
              </div>
              <Button onClick={handleRefreshAll} variant="outline" className="gap-2">
                <RefreshCw className="h-4 w-4" />
                Refresh All
              </Button>
            </div>

            {/* Proof Approval Alerts */}
            {ordersAwaitingApproval.length > 0 && (
              <Card className="border-orange-200 bg-orange-50">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <AlertCircle className="h-5 w-5 text-orange-600" />
                      <div>
                        <h3 className="font-semibold text-orange-900">
                          {ordersAwaitingApproval.length} Proof{ordersAwaitingApproval.length === 1 ? '' : 's'} Ready for Review
                        </h3>
                        <p className="text-sm text-orange-700">
                          Your design proof{ordersAwaitingApproval.length === 1 ? ' is' : 's are'} ready for approval. Review and approve to proceed with production.
                        </p>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      {ordersAwaitingApproval.slice(0, 3).map((order: any) => (
                        <Button
                          key={order.id}
                          onClick={() => setLocation(`/orders/${order.id}/proof-review`)}
                          size="sm"
                          className="bg-orange-600 hover:bg-orange-700 text-white"
                        >
                          Review {order.orderNumber}
                        </Button>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Conversion Alert */}
            {convertToOrderMutation.isPending && (
              <Card className="border-blue-200 bg-blue-50">
                <CardContent className="p-4">
                  <div className="flex items-center gap-2 text-blue-800">
                    <RefreshCw className="h-4 w-4 animate-spin" />
                    Converting quote to order...
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Overview Stats & Quick Actions */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Active Quotes</CardTitle>
                  <FileText className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{dashboardStats.activeQuotes}</div>
                  <p className="text-xs text-muted-foreground">
                    Pending approval
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Orders</CardTitle>
                  <Package className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{dashboardStats.totalOrders}</div>
                  <p className="text-xs text-muted-foreground">
                    All time
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Pending Orders</CardTitle>
                  <AlertCircle className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{dashboardStats.pendingOrders}</div>
                  <p className="text-xs text-muted-foreground">
                    In progress
                  </p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Completed</CardTitle>
                  <TrendingUp className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{dashboardStats.completedOrders}</div>
                  <p className="text-xs text-muted-foreground">
                    This month
                  </p>
                </CardContent>
              </Card>
            </div>

            {/* Management Section */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card className="hover:shadow-md transition-shadow cursor-pointer" onClick={() => setLocation('/quotes')}>
                <CardContent className="p-6 text-center">
                  <FileText className="h-8 w-8 mx-auto mb-3 text-blue-600" />
                  <h3 className="font-semibold text-gray-900 mb-2">Manage Quotes</h3>
                  <p className="text-sm text-gray-600">Create and manage quote requests</p>
                </CardContent>
              </Card>

              <Card className="hover:shadow-md transition-shadow cursor-pointer" onClick={() => setLocation('/orders')}>
                <CardContent className="p-6 text-center">
                  <ListOrdered className="h-8 w-8 mx-auto mb-3 text-green-600" />
                  <h3 className="font-semibold text-gray-900 mb-2">Manage Orders</h3>
                  <p className="text-sm text-gray-600">Track and manage order progress</p>
                </CardContent>
              </Card>

              <Card className="hover:shadow-md transition-shadow cursor-pointer" onClick={() => setLocation('/billing')}>
                <CardContent className="p-6 text-center">
                  <Settings className="h-8 w-8 mx-auto mb-3 text-purple-600" />
                  <h3 className="font-semibold text-gray-900 mb-2">Billing</h3>
                  <p className="text-sm text-gray-600">Invoice and payment management</p>
                </CardContent>
              </Card>

              <Card className="hover:shadow-md transition-shadow cursor-pointer" onClick={() => setLocation('/settings')}>
                <CardContent className="p-6 text-center">
                  <Calendar className="h-8 w-8 mx-auto mb-3 text-orange-600" />
                  <h3 className="font-semibold text-gray-900 mb-2">Settings</h3>
                  <p className="text-sm text-gray-600">Configure preferences</p>
                </CardContent>
              </Card>
            </div>

            {/* Recent Activity Section */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Recent Quotes */}
              <Card>
                <CardHeader className="pb-4">
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5" />
                    Recent Quotes
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {quotesLoading ? (
                    <div className="space-y-4">
                      {[...Array(3)].map((_, i) => (
                        <div key={i} className="animate-pulse">
                          <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                          <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                        </div>
                      ))}
                    </div>
                  ) : quotes.slice(0, 5).map((quote: any) => (
                    <div key={quote.id} className="flex justify-between items-center py-3 border-b last:border-b-0">
                      <div className="flex-1 min-w-0">
                        <p className="font-medium text-sm text-gray-900">{quote.quoteNumber}</p>
                        <p className="text-sm text-gray-600 truncate">{quote.subject}</p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge 
                          variant="outline" 
                          className={
                            quote.status === "pending" 
                              ? "bg-yellow-50 text-yellow-700 border-yellow-200"
                              : quote.status === "approved"
                              ? "bg-blue-50 text-blue-700 border-blue-200"
                              : quote.status === "converted"
                              ? "bg-green-50 text-green-700 border-green-200"
                              : "bg-gray-50 text-gray-700 border-gray-200"
                          }
                        >
                          {quote.status}
                        </Badge>
                        {quote.status === "approved" && (
                          <Button
                            size="sm"
                            onClick={() => convertToOrderMutation.mutate(quote.id)}
                            disabled={convertToOrderMutation.isPending}
                            className="ml-2"
                          >
                            Convert to Order
                          </Button>
                        )}
                      </div>
                    </div>
                  ))}
                  {quotes.length === 0 && (
                    <div className="text-center py-8">
                      <FileText className="h-12 w-12 mx-auto text-gray-300 mb-3" />
                      <p className="text-gray-500">No quotes yet</p>
                      <Button 
                        onClick={() => setLocation('/quote')} 
                        size="sm" 
                        className="mt-2"
                      >
                        Create First Quote
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Recent Orders */}
              <Card>
                <CardHeader className="pb-4">
                  <CardTitle className="flex items-center gap-2">
                    <Package className="h-5 w-5" />
                    Recent Orders
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {ordersLoading ? (
                    <div className="space-y-4">
                      {[...Array(3)].map((_, i) => (
                        <div key={i} className="animate-pulse">
                          <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                          <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                        </div>
                      ))}
                    </div>
                  ) : orders.slice(0, 5).map((order: any) => (
                    <div key={order.id} className="flex justify-between items-center py-3 border-b last:border-b-0">
                      <div className="flex-1 min-w-0">
                        <p className="font-medium text-sm text-gray-900">{order.orderNumber}</p>
                        <p className="text-sm text-gray-600 truncate">{order.subject}</p>
                      </div>
                      <Badge 
                        variant="outline" 
                        className={
                          order.status === "draft" 
                            ? "bg-gray-50 text-gray-700 border-gray-200"
                            : order.status === "in-progress" || order.status?.startsWith("waiting-approval")
                            ? "bg-blue-50 text-blue-700 border-blue-200"
                            : order.status === "completed"
                            ? "bg-green-50 text-green-700 border-green-200"
                            : "bg-purple-50 text-purple-700 border-purple-200"
                        }
                      >
                        {order.status}
                      </Badge>
                    </div>
                  ))}
                  {orders.length === 0 && (
                    <div className="text-center py-8">
                      <Package className="h-12 w-12 mx-auto text-gray-300 mb-3" />
                      <p className="text-gray-500">No orders yet</p>
                      <Button 
                        onClick={() => setLocation('/order')} 
                        size="sm" 
                        className="mt-2"
                      >
                        Create First Order
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* Archive Section - Collapsible at Bottom */}
            <div className="border-t pt-8">
              <Collapsible open={isArchiveExpanded} onOpenChange={setIsArchiveExpanded}>
                <CollapsibleTrigger asChild>
                  <Button variant="ghost" className="w-full justify-between p-4 h-auto">
                    <div className="flex items-center gap-3">
                      <Archive className="h-5 w-5 text-gray-500" />
                      <div className="text-left">
                        <h3 className="font-semibold text-gray-900">Archive</h3>
                        <p className="text-sm text-gray-600">
                          {archivedQuotes.length + completedOrders.length} completed items
                        </p>
                      </div>
                    </div>
                    {isArchiveExpanded ? (
                      <ChevronDown className="h-4 w-4 text-gray-500" />
                    ) : (
                      <ChevronRight className="h-4 w-4 text-gray-500" />
                    )}
                  </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="pt-4">
                  <ArchiveSection
                    archivedQuotes={archivedQuotes}
                    completedOrders={completedOrders}
                    isLoading={quotesLoading || ordersLoading}
                  />
                </CollapsibleContent>
              </Collapsible>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}